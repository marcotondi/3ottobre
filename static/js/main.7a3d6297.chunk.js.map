{"version":3,"sources":["image/marco.png","image/melania.png","components/Header.js","components/Countdown.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","marco","alt","melania","React","Component","ClockFace","props","time","label","Countdown","state","deadline","this","timerID","setInterval","tick","clearInterval","t","Date","parse","setState","seconds","Math","floor","minutes","hours","days","App","show","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,kMCqC5BC,E,iLA9BX,OACE,oCACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,4CACX,iDAON,yBAAKA,UAAU,eACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBAAKA,UAAU,aAAaC,IAAKC,IAAOC,IAAI,WAG9C,4BAAQH,UAAU,kBAChB,yBAAKA,UAAU,aAAaC,IAAKG,IAASD,IAAI,qB,GAtBzCE,IAAMC,WCuB3B,SAASC,EAAUC,GACjB,OACE,oCACE,yBAAKR,UAAU,uBACb,6BAASA,UAAU,+DACjB,yBAAKA,UAAU,8BACb,uBAAGA,UAAU,SAAb,IAAuBQ,EAAMC,KAA7B,KACA,uBAAGT,UAAU,sCACV,IACAQ,EAAME,MAAO,S,IAuDbC,E,YA7Cb,WAAYH,GAAQ,IAAD,8BACjB,4CAAMA,KAEDI,MAAQ,CACXC,SAAU,EAAKL,MAAMK,UAJN,E,iFAQE,IAAD,OAClBC,KAAKC,QAAUC,aAAY,kBAAM,EAAKC,SAAQ,O,6CAI9CC,cAAcJ,KAAKC,W,6BAInB,IAAII,EAAIC,KAAKC,MAAMP,KAAKF,MAAMC,UAAYO,KAAKC,MAAM,IAAID,MAEzDN,KAAKQ,SAAS,CACZC,QAASC,KAAKC,MAAON,EAAI,IAAQ,IACjCO,QAASF,KAAKC,MAAON,EAAI,IAAO,GAAM,IACtCQ,MAAOH,KAAKC,MAAON,EAAC,KAAuB,IAC3CS,KAAMJ,KAAKC,MAAMN,EAAC,W,+BAKpB,OACE,oCACE,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,oBACb,kBAACO,EAAD,CAAWE,KAAMK,KAAKF,MAAMgB,KAAMlB,MAAO,SACzC,kBAACH,EAAD,CAAWE,KAAMK,KAAKF,MAAMe,MAAOjB,MAAO,UAC1C,kBAACH,EAAD,CAAWE,KAAMK,KAAKF,MAAMc,QAAShB,MAAO,YAC5C,kBAACH,EAAD,CAAWE,KAAMK,KAAKF,MAAMW,QAASb,MAAO,mB,GApChCL,IAAMC,WCbfuB,G,kBA3Bb,WAAYrB,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IAAMK,EAAW,IAAIO,KAAK,KAAM,EAAG,GAAI,GAAI,GAAI,EAAG,GAC9CX,EAAOW,KAAKC,MAAMR,GAAYO,KAAKC,MAAM,IAAID,MAJhC,OAMjB,EAAKR,MAAQ,CACXC,SAAUA,EACViB,KAAMrB,GAAQ,GARC,E,sEAajB,OACE,6BAAST,UAAU,WACjB,kBAAC,EAAD,MAEA,uBAAGA,UAAU,kEACX,8CAGDc,KAAKF,MAAMkB,MAAQ,kBAAC,EAAD,CAAWjB,SAAUC,KAAKF,MAAMC,gB,GAtB1CR,IAAMC,YCOJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a3d6297.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marco.c71ccbdb.png\";","module.exports = __webpack_public_path__ + \"static/media/melania.5a681849.png\";","import React from \"react\";\n\nimport marco from \"../image/marco.png\"; // Tell webpack this JS file uses this image\nimport melania from \"../image/melania.png\"; // Tell webpack this JS file uses this image\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"level container\">\n          <div className=\"level-left\">\n            <div className=\"level-item\">\n              <p className=\"title is-size-1-desktop is-size-4-mobile\">\n                <span>#savethedate</span>\n              </p>\n              {/* <p className=\"subtitle is-size-5-desktop is-size-6-mobile\">\n                <p> for COVID-19</p>\n              </p> */}\n            </div>\n          </div>\n          <div className=\"level-right\">\n            <div className=\"level-item\">\n              <figure className=\"image is-96x96\">\n                <img className=\"is-rounded\" src={marco} alt=\"marco\" />\n              </figure>\n\n              <figure className=\"image is-96x96\">\n                <img className=\"is-rounded\" src={melania} alt=\"melania\" />\n              </figure>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Header; // Don’t forget to use export default!\n","import React from \"react\";\n\n// Page --> Header - {left - right} --> {Countdown -  botton}\nfunction ButtonEvent(props) {\n  return (\n    <>\n      <div className=\"tile is-ancestor\">\n        <div className=\"tile is-parent is-2\">\n          <div\n            title=\"Add to Calendar\"\n            className=\"addeventatc is-size-6 is-size-7-touch\"\n          >\n            Add to Calendar\n            <span className=\"start\">10/03/2020 10:30 AM</span>\n            <span className=\"end\">10/03/2020 12:30 PM</span>\n            <span className=\"timezone\">Rome/Italy</span>\n            <span className=\"title\">Marco & Melania</span>\n            <span className=\"description\">http://3ottobre.it</span>\n            <span className=\"location\">\n              Largo Castello, 26, 73010 Lequile LE\n            </span>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction ClockFace(props) {\n  return (\n    <>\n      <div className=\"tile is-parent is-3\">\n        <article className=\"tile is-child box notification has-text-centered is-danger \">\n          <div className=\"box has-background-warning\">\n            <p className=\"title\"> {props.time} </p>\n            <p className=\"subtitle is-size-5 is-size-6-touch\">\n              {\" \"}\n              {props.label}{\" \"}\n            </p>\n          </div>\n        </article>\n      </div>\n    </>\n  );\n}\n\nclass Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      deadline: this.props.deadline, //new Date(2020, 9, 3, 10, 30, 0, 0)\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    let t = Date.parse(this.state.deadline) - Date.parse(new Date());\n\n    this.setState({\n      seconds: Math.floor((t / 1000) % 60),\n      minutes: Math.floor((t / 1000 / 60) % 60),\n      hours: Math.floor((t / (1000 * 60 * 60)) % 24),\n      days: Math.floor(t / (1000 * 60 * 60 * 24)),\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <div className=\"tile is-ancestor\">\n            <ClockFace time={this.state.days} label={\"Days\"} />\n            <ClockFace time={this.state.hours} label={\"Hours\"} />\n            <ClockFace time={this.state.minutes} label={\"Minutes\"} />\n            <ClockFace time={this.state.seconds} label={\"Seconds\"} />\n          </div>\n\n          {/* <ButtonEvent /> */}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Countdown; // Don’t forget to use export default!\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Countdown from \"./Countdown\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const deadline = new Date(2021, 8, 17, 10, 30, 0, 0);\n    let time = Date.parse(deadline) - Date.parse(new Date());\n\n    this.state = {\n      deadline: deadline,\n      show: time >= 0,\n    };\n  }\n\n  render() {\n    return (\n      <section className=\"section\">\n        <Header />\n\n        <p className=\"subtitle is-size-3-desktop is-size-4-mobile has-text-centered \">\n          <p>coming soon...</p>\n        </p>\n\n        {this.state.show && <Countdown deadline={this.state.deadline} />}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}